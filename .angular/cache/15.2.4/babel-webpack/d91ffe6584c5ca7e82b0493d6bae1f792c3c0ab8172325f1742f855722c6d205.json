{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-webstorage\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(httpClient, localStorage) {\n      this.httpClient = httpClient;\n      this.localStorage = localStorage;\n      this.loggedIn = new EventEmitter();\n      this.username = new EventEmitter();\n      this.refreshTokenPayload = {\n        refreshToken: this.getRefreshToken(),\n        username: this.getUserName()\n      };\n    }\n    signup(signupRequestPayload) {\n      return this.httpClient.post('http://localhost:8080/api/auth/signup', signupRequestPayload, {\n        responseType: 'text'\n      });\n    }\n    login(loginRequestPayload) {\n      return this.httpClient.post('http://localhost:8080/api/auth/login', loginRequestPayload).pipe(map(data => {\n        this.localStorage.store('authenticationToken', data.authenticationToken);\n        this.localStorage.store('username', data.username);\n        this.localStorage.store('refreshToken', data.refreshToken);\n        this.localStorage.store('expiresAt', data.expiresAt);\n        this.loggedIn.emit(true);\n        this.username.emit(data.username);\n        return true;\n      }));\n    }\n    getJwtToken() {\n      return this.localStorage.retrieve('authenticationToken');\n    }\n    refreshToken() {\n      return this.httpClient.post('http://localhost:8080/api/auth/refresh/token', this.refreshTokenPayload).pipe(tap(response => {\n        this.localStorage.clear('authenticationToken');\n        this.localStorage.clear('expiresAt');\n        this.localStorage.store('authenticationToken', response.authenticationToken);\n        this.localStorage.store('expiresAt', response.expiresAt);\n      }));\n    }\n    logout() {\n      this.httpClient.post('http://localhost:8080/api/auth/logout', this.refreshTokenPayload, {\n        responseType: 'text'\n      }).subscribe(data => {\n        console.log(data);\n      }, error => {\n        throwError(error);\n      });\n      this.localStorage.clear('authenticationToken');\n      this.localStorage.clear('username');\n      this.localStorage.clear('refreshToken');\n      this.localStorage.clear('expiresAt');\n    }\n    getUserName() {\n      return this.localStorage.retrieve('username');\n    }\n    getRefreshToken() {\n      return this.localStorage.retrieve('refreshToken');\n    }\n    isLoggedIn() {\n      return this.getJwtToken() != null;\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalStorageService));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}