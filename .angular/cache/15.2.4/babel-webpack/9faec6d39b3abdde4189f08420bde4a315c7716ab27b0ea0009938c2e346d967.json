{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../subreddit.service\";\nimport * as i3 from \"@angular/forms\";\nexport let CreateSubredditComponent = /*#__PURE__*/(() => {\n  class CreateSubredditComponent {\n    constructor(router, subredditService) {\n      this.router = router;\n      this.subredditService = subredditService;\n      this.title = new FormControl('');\n      this.description = new FormControl('');\n      this.createSubredditForm = new FormGroup({\n        title: new FormControl('', Validators.required),\n        description: new FormControl('', Validators.required)\n      });\n      this.subredditModel = {\n        name: '',\n        description: ''\n      };\n    }\n    ngOnInit() {}\n    discard() {\n      this.router.navigateByUrl('/');\n    }\n    createSubreddit() {\n      this.subredditModel.name = this.createSubredditForm.get('title').value;\n      this.subredditModel.description = this.createSubredditForm.get('description').value;\n      this.subredditService.createSubreddit(this.subredditModel).subscribe(data => {\n        this.router.navigateByUrl('/list-subreddits');\n      }, error => {\n        throwError(error);\n      });\n    }\n  }\n  CreateSubredditComponent.ɵfac = function CreateSubredditComponent_Factory(t) {\n    return new (t || CreateSubredditComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.SubredditService));\n  };\n  CreateSubredditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateSubredditComponent,\n    selectors: [[\"app-create-subreddit\"]],\n    decls: 31,\n    vars: 3,\n    consts: [[1, \"container\"], [1, \"row\"], [1, \"create-subreddit-container\"], [1, \"post-form\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [1, \"create-subreddit-heading\"], [\"type\", \"text\", \"placeholder\", \"Title\", 1, \"form-control\", 2, \"margin-top\", \"5px\", 3, \"formControlName\"], [\"type\", \"text\", \"placeholder\", \"Description\", 2, \"width\", \"100%\", \"margin-top\", \"5px\", 3, \"formControlName\"], [1, \"float-right\", 2, \"margin-top\", \"5px\"], [1, \"btnDiscard\", 3, \"click\"], [1, \"btnCreateSubreddit\"], [1, \"col-md-3\"], [1, \"sidebar\"], [1, \"guidelines\"]],\n    template: function CreateSubredditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function CreateSubredditComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.createSubreddit();\n        });\n        i0.ɵɵelementStart(4, \"div\", 4)(5, \"div\", 5);\n        i0.ɵɵtext(6, \"Create Subreddit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"hr\")(8, \"input\", 6)(9, \"textarea\", 7);\n        i0.ɵɵelementStart(10, \"div\")(11, \"div\", 8)(12, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function CreateSubredditComponent_Template_button_click_12_listener() {\n          return ctx.discard();\n        });\n        i0.ɵɵtext(13, \"Discard\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"button\", 10);\n        i0.ɵɵtext(15, \"Create\");\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelementStart(16, \"div\", 11)(17, \"div\", 12)(18, \"h5\", 13);\n        i0.ɵɵtext(19, \"Posting to Spring Reddit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(20, \"hr\");\n        i0.ɵɵelementStart(21, \"ul\")(22, \"li\");\n        i0.ɵɵtext(23, \"Remember the human\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(24, \"hr\");\n        i0.ɵɵelementStart(25, \"li\");\n        i0.ɵɵtext(26, \"Behave like you would in real life\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(27, \"hr\");\n        i0.ɵɵelementStart(28, \"li\");\n        i0.ɵɵtext(29, \"Don't spam\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(30, \"hr\");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.createSubredditForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControlName\", \"title\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formControlName\", \"description\");\n      }\n    },\n    dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n    styles: [\".create-subreddit-container[_ngcontent-%COMP%]{--post-line-color: #ccc;border:1px solid #ccc;margin-top:10px;margin-bottom:10px;overflow:hidden;background-color:#fffc;color:#878a8c;position:relative;border-radius:4px;padding:5px}.create-subreddit-heading[_ngcontent-%COMP%]{font-size:18px;font-weight:500;line-height:22px;color:#1c1c1c;flex:1}.btnCreateSubreddit[_ngcontent-%COMP%]{background-color:#0079d3;border-color:#0079d3;color:#f0f8ff;fill:#0079d3;border:1px solid;border-radius:4px;text-align:center;letter-spacing:1px;text-decoration:none;font-size:12px;font-weight:700;letter-spacing:.5px;line-height:24px;text-transform:uppercase;padding:3px 16px;opacity:1;width:288px;height:34px}.btnDiscard[_ngcontent-%COMP%]{fill:#0079d3;border:1px solid;border-radius:4px;text-align:center;letter-spacing:1px;text-decoration:none;font-size:12px;font-weight:700;letter-spacing:.5px;line-height:24px;text-transform:uppercase;padding:3px 16px;opacity:1;width:288px;height:34px;margin-top:5px;color:#0079d3;background-color:transparent}.guidelines[_ngcontent-%COMP%]{text-align:center;font-size:16px;font-weight:500;line-height:20px;color:#1c1c1c}.sidebar[_ngcontent-%COMP%]{width:312px;height:242px;--post-line-color: #ccc;border:1px solid #ccc;overflow:hidden;background-color:#fffc;color:#878a8c;position:relative;border-radius:4px;padding:5px;margin-top:10px;margin-bottom:10px}\"]\n  });\n  return CreateSubredditComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}